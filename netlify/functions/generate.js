const fetch = require('node-fetch');

// Simple local response generator for when AI models are unavailable
function generateLocalResponse(data) {
  const tone = data.type === 'positive' || data.type === 'lift' ? 'Uplift' : 'Roast';
  const displayName = data.name || 'Someone';
  const userMood = data.mood?.toLowerCase() || 'feeling something';

  const upliftResponses = [/* same as your list... */];
  const roastResponses = [/* same as your list... */];

  const responses = tone === 'Uplift' ? upliftResponses : roastResponses;
  return responses[Math.floor(Math.random() * responses.length)];
}

// Fallback messages with engaging style
function generateFallbackResponse(data, headers, errorType = 'fallback') {
  const tone = data.type === 'positive' || data.type === 'lift' ? 'Uplift' : 'Roast';
  const title = tone === 'Uplift' ? 'LIFT PROTOCOL ACTIVATED' : 'ZING MODE ENGAGED';
  const displayName = data.name || 'Someone';
  const fallbackMessages = { /* same blocks you already wrote */ };
  const hashtags = tone === 'Uplift'
    ? '\n\n💫 Generated by Lift or Zing™\n#LiftOrZing #PositiveVibes #Motivation #GoodVibes #LiftUp #SpreadJoy'
    : '\n\n🔥 Generated by Lift or Zing™\n#LiftOrZing #RoastMode #Funny #Viral #Trending #ZingLife';

  const message = (fallbackMessages[errorType] || fallbackMessages.fallback) + hashtags;
  return {
    statusCode: 200,
    headers,
    body: JSON.stringify({ message, title, source: errorType })
  };
}

exports.handler = async function (event) {
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json'
  };

  if (event.httpMethod === 'OPTIONS') return { statusCode: 200, headers, body: '' };
  if (event.httpMethod !== 'POST') return { statusCode: 405, headers, body: JSON.stringify({ error: 'Method Not Allowed' }) };

  let data;
  try {
    data = JSON.parse(event.body || '{}');
  } catch {
    return generateFallbackResponse({ type: 'funny' }, headers, 'parse_error');
  }

  const { name, gender, mood, type, intensity } = data;
  const displayName = name || 'Someone';
  const tone = type === 'positive' || type === 'lift' ? 'Uplift' : 'Roast';
  const userMood = mood?.toLowerCase() || 'unknown mood';
  const level = intensity || 'medium';

  const isHarmful = /suicide|kill myself|cutting|self harm|hurt myself|hurt others|end my life|die|kill someone|take my life/i;
  if (isHarmful.test(userMood)) {
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        message: "It sounds like you're going through something heavy — and that's okay.\n\n- 🌍 International: https://www.befrienders.org\n- 🇺🇸 US: https://988lifeline.org\n- 🇬🇧 UK: https://samaritans.org\n\nTake a breath. You matter. ❤️",
        title: "Let's take a moment",
        source: 'safety-check'
      })
    };
  }

  const prompt = `
Create a creative, emotionally expressive message for ${displayName}${gender ? ` (${gender})` : ''}.

Context: ${mood || 'unknown'} mood, ${level} intensity.

${tone === 'Uplift'
  ? 'Style: Empowering, vivid, and positive — like a personal motivational quote or uplifting affirmation.'
  : 'Style: Teasing, ironic, and clever — roast them playfully. Do NOT praise. Be smart, punchy, and avoid compliments. Think witty stand-up humor.'}

Sign off with: "🔥 Generated by Lift or Zing™"
Message only — no commentary or meta text.
`.trim();

  const MODEL_POOL = [
    { model: 'mistralai/mistral-7b-instruct:free', key: process.env.OPENROUTER_KEY_MISTRAL },
    { model: 'sarvamai/sarvam-m:free', key: process.env.OPENROUTER_KEY_SARVAM },
    { model: 'shisa-ai/shisa-v2-llama3.3-70b:free', key: process.env.OPENROUTER_KEY_SHISA },
    { model: 'moonshotai/kimi-vl-a3b-thinking:free', key: process.env.OPENROUTER_KEY_KIMI },
    { model: 'nvidia/llama-3.1-nemotron-ultra-253b-v1:free', key: process.env.OPENROUTER_KEY_NEMO }
  ];

  const rateLimitedModels = new Set();

  for (const { model, key } of MODEL_POOL) {
    if (!key || rateLimitedModels.has(model)) continue;

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);

      const response = await fetch(`https://openrouter.ai/api/v1/chat/completions`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${key}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': 'https://liftorzing.com',
          'X-Title': 'LiftorZing'
        },
        body: JSON.stringify({
          model,
          messages: [{ role: 'user', content: prompt }],
          max_tokens: 200,
          temperature: 0.9,
          top_p: 0.9,
          stream: false
        }),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        if (response.status === 429) rateLimitedModels.add(model);
        continue;
      }

      const result = await response.json();
      const message = result?.choices?.[0]?.message?.content?.trim();
      if (message && message.length > 10) {
        const hasBranding = /lift or zing/i.test(message);
        const hashtags = tone === 'Uplift'
          ? '\n\n💫 Generated by Lift or Zing™\n#LiftOrZing #PositiveVibes #Motivation #GoodVibes #LiftUp #SpreadJoy'
          : '\n\n🔥 Generated by Lift or Zing™\n#LiftOrZing #RoastMode #Funny #Viral #Trending #ZingLife';
        return {
          statusCode: 200,
          headers,
          body: JSON.stringify({
            message: hasBranding ? message : message + hashtags,
            title: tone === 'Uplift' ? 'LIFT PROTOCOL ACTIVATED' : 'ZING MODE ENGAGED',
            source: model
          })
        };
      }
    } catch (err) {
      if (err.name === 'AbortError') continue;
    }
  }

  // Hugging Face fallback
  const HUGGINGFACE_MODELS = [
    'microsoft/DialoGPT-medium',
    'gpt2',
    'distilgpt2'
  ];

  const huggingfaceKey = process.env.HUGGINGFACE_API_KEY;

  if (huggingfaceKey) {
    for (const model of HUGGINGFACE_MODELS) {
      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 8000);

        const response = await fetch(`https://api-inference.huggingface.co/models/${model}`, {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${huggingfaceKey}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            inputs: prompt,
            parameters: { max_new_tokens: 150, temperature: 0.9, do_sample: true }
          }),
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (!response.ok) continue;

        const result = await response.json();
        const message = result?.[0]?.generated_text?.trim();

        if (message && message.length > 10) {
          const hasBranding = /lift or zing/i.test(message);
          const hashtags = tone === 'Uplift'
            ? '\n\n💫 Generated by Lift or Zing™\n#LiftOrZing #PositiveVibes #Motivation #GoodVibes #LiftUp #SpreadJoy'
            : '\n\n🔥 Generated by Lift or Zing™\n#LiftOrZing #RoastMode #Funny #Viral #Trending #ZingLife';

          return {
            statusCode: 200,
            headers,
            body: JSON.stringify({
              message: hasBranding ? message : message + hashtags,
              title: tone === 'Uplift' ? 'LIFT PROTOCOL ACTIVATED' : 'ZING MODE ENGAGED',
              source: `huggingface-${model}`
            })
          };
        }
      } catch (err) {
        continue;
      }
    }
  }

  // If all fail, return local fallback
  const localMessage = generateLocalResponse(data);
  const hashtags = tone === 'Uplift'
    ? '\n\n💫 Generated by Lift or Zing™\n#LiftOrZing #PositiveVibes #Motivation #GoodVibes #LiftUp #SpreadJoy'
    : '\n\n🔥 Generated by Lift or Zing™\n#LiftOrZing #RoastMode #Funny #Viral #Trending #ZingLife';

  return {
    statusCode: 200,
    headers,
    body: JSON.stringify({
      message: localMessage + hashtags,
      title: tone === 'Uplift' ? 'LIFT PROTOCOL ACTIVATED' : 'ZING MODE ENGAGED',
      source: 'local-fallback'
    })
  };
};
